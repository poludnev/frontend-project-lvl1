22/04/2020:
1. gitignore: исправлен, "*.DS..";

2. https://github.com/poludnev/frontend-project-lvl1/blob/10c1c2c02722df7c6a6477834865416fb8cb9280/src/games/game-even.js#L9
// Приставку is лучше применять только к функциям-предикатам. Давайте подумаем, какую операцию выполняет данная функция? Она возвращает пару значений (вопрос-ответ), т.е. по сути генерирует игровые данные для раунда. Именуйте функцию с опорой на это.
= в игре Even имя изменено на checkIfEvenGame, и в игре Prime - на checkIfPrimeGame.

3. https://github.com/poludnev/frontend-project-lvl1/blob/10c1c2c02722df7c6a6477834865416fb8cb9280/src/games/game-even.js#L3
// Обращаю ещё раз внимание, что имя функции — содержит глагол.
= имя функции запуска игры во всех модулях изменено на runGame.

4. https://github.com/poludnev/frontend-project-lvl1/blob/10c1c2c02722df7c6a6477834865416fb8cb9280/src/games/game-calc.js#L8
// Не обязательно прибавлять суффикс list к имени. Ведь именование во множественном числе уже указывать, то здесь содержится список элементов.
= исправлено.

5. https://github.com/poludnev/frontend-project-lvl1/blob/10c1c2c02722df7c6a6477834865416fb8cb9280/src/games/game-calc.js#L24-L25
// Не нужно присваивать значение null переменной operationResult. Нужно 
сразу возвращать его: return null;
= исправлено
// Кстати, operationResult - это ведь и есть ответ игры. Можно так сразу и именовать, и не вводить дополнительную сущность.
= исправлено

6. https://github.com/poludnev/frontend-project-lvl1/blob/10c1c2c02722df7c6a6477834865416fb8cb9280/src/games/game-progress.js#L5
// Обычно в именах не используют артикли.
= исправлено. На самом деле это A в данном случае не артикль, а указания на тип прогрессии - арифметическая. Но необходимости в самом деле в этом нет, во-первых она тут одна, а во-вторых, из самой функции и так видно, что она арифметическая. С другой стороны, функция ведь может быть в отдельном модуле (и была бы, если использовалась где-то еще в проекте), поэтому я решил оставить явное указание типа и переименовал в makeArithmProgression.

7. https://github.com/poludnev/frontend-project-lvl1/blob/10c1c2c02722df7c6a6477834865416fb8cb9280/src/games/game-progress.js#L19
// progress - может быть воспринято, как глагол. Лучше уточнить: это позиция скрытого элемента или missingElementPosition.
= исправлено.

8. https://github.com/poludnev/frontend-project-lvl1/blob/10c1c2c02722df7c6a6477834865416fb8cb9280/src/funcs.js#L3
// Да, вот так лучше. Можно ещё цвет передавать параметром функции и значение red сделать значением по умолчанию.
= исправлено. Добавил пару доп стилей. 

9. https://github.com/poludnev/frontend-project-lvl1/blob/10c1c2c02722df7c6a6о477834865416fb8cb9280/src/index.js#L12
// game - имя функции — глагол
= изменено на callGameRound (“вызвать игру”)
// gameCall - а это ведь данные раунда, т.е. gameData.
= Изменено на gameRoundData.

10. Второй бэйдж от CodeClimate указывает, покрыт ли код тестами. Мы в нашем проекте модульные тесты не используем, поэтому он не обязателен.
= исправлено

11. Останется только дополнить readme репозитория более детальным описанием проекта (как установить, как запускать, какие игры и т.д.)
= исправлено


16/04/2020:
1. Зависимости.
Перепроверил зависимости полноценно, оставил только те, которые реально задействованы:
"@babel/cli": "^7.5.5",  -  “интерфейс командной строки”, нужен для работы через терминал
"@babel/core": "^7.5.5", - “ядро” кода для трансляции файлов
"@babel/node": "^7.5.5", - для оперативной трансляции при запуске js c неподдерживаемым функциями node
"@babel/preset-env": "^7.5.5", - набор основных плагинов babel
"babel-eslint": "^10.0.2", - позволяет проверять любой транслируемый babel код при помощи eslint. В проекте парсером для линтера прописан babel, для его работы требуется babel-eslint.
"eslint": "^6.1.0", - собственно, линтер.
"eslint-config-airbnb-base": "^14.0.0", - при установке линтера конфигурацией правил была выбрана airbnb, она не работает без eslint-plugin-import.
"eslint-plugin-import": "^2.18.2"  - нужен для airbnb.

2. Артефакты. 
Добавил test-brain-games.js в игнорлист, локально оставил, удобно для теста всех игр сразу.
3. https://github.com/poludnev/frontend-project-lvl1/blob/a8dab507f2c560226f302be4878a42d9fefe237f/src/games/game-even.js#L12
//Универсальность - это хорошо, но не нужно выполнять избыточные операции. Нет необходимости приводить строку к строке.// 
= исправил. Теперь ответ передается в константой answer, она же получает значение, приведенное к строке, если и где это необходимо

//Также нет необходимости передавать описание игры при каждом вызове функции-генератора evenGame. Его можно передать движку отдельным параметром. А evenGame вернёт пару — вопрос-ответ. //
= исправлено во всех играх, в движок передается два параметра - интро и пара вопрос-ответ. 

4. https://github.com/poludnev/frontend-project-lvl1/blob/a8dab507f2c560226f302be4878a42d9fefe237f/src/games/game-calc.js#L23-L24
// По-хорошему, здесь нужно бросать исключение, но обработку ошибок мы будем проходить позже. Сейчас просто верните null или false. // 
= исправлено. 

5. https://github.com/poludnev/frontend-project-lvl1/blob/a8dab507f2c560226f302be4878a42d9fefe237f/src/games/game-gcd.js#L5-L19
//Получилось сложно. Попробуйте упростить код. Например, с помощью алгоритма Евклида. //
= исправлено.
// Также нужно поработать ещё над именованием сущностей. //
= после изменения алгоритма поиска НОД сущностей стало значительно меньше, аргументы функции НОД изменил, чтобы не было совпадений. 

6. https://github.com/poludnev/frontend-project-lvl1/blob/a8dab507f2c560226f302be4878a42d9fefe237f/src/games/game-even.js#L9
//Имена функций должны содержать глагол (ведь они обозначают действие) и отражать суть операции, которую они описывают. //
=== исправлено на isEvenGame, так суть операции функции - получить ответ, четное число или нет. По этому же принципу переименованы функции-игры в остальных играх, кроме calcGame, потому что название все-таки отражает смысл того, что функция делает.

7. https://github.com/poludnev/frontend-project-lvl1/blob/a8dab507f2c560226f302be4878a42d9fefe237f/src/games/game-calc.js#L10
// Из списка под operations логично будет получить отдельный элемент operation. - // 
=== Абсолютно согласен, идея была в том, что есть список операций, а мы из него получаем Оператор, но это определенно не оператор, потому что мы получаем строку, а не оператор. Исправлено.
// Также проанализируйте, какое значение будет получено из массива по индексу, который равен его длине. //
=== очевидно, что undefined, тогда switch вернет default. Поэтому когда дефолтным кейсом была операция, ошибки это не вызывало. Исправлено. 

8. https://github.com/poludnev/frontend-project-lvl1/blob/a8dab507f2c560226f302be4878a42d9fefe237f/src/games/game-progress.js#L21
// Чтобы код было удобнее читать, под случайные значения, которые передаются в функцию, лучше выделить отдельные константы. //
= исправлено. 
// progressionNumbers - напишите мне в слак, как правильно прочитать это имя? Что оно обозначает? //
=== “числа прогрессии”. Хотя конечно очевидно, что прогрессия состоит из чисел, и смысла на это указывать нет, тем более что значение этой константе присваивается функцией, создающей прогрессии. Исправил на просто progression.

9. https://github.com/poludnev/frontend-project-lvl1/blob/a8dab507f2c560226f302be4878a42d9fefe237f/src/index.js#L10-L14
// Мудрёно получилось. Предлагаю упростить. Создайте функцию decorate и передавайте в неё те целиком те строки, которые нужно стилизовать. Для каждого стиля - отдельный вызов. Ведь такой код будет очень сложно поддерживать. //
=== А вот со стилизацией строк я совсем перестал понимать, что от меня требуется. Я понимаю, что код выглядит коряво, но идей у меня нет никаких. 
Мне нужно стилизовать определенную часть строки. Чтобы это сделать, я могу только разбить строки на подстроки, вызвать на этих подстроках функцию decorate, потому собрать из них новую строку из возвращенных стилизованных и части оригинальной строки. Я так сделал, кажется, стало более читаемо. Но со стилизацией описание игры - беда. 
1. Стилизация должна производиться движком, потому что в него передается неформатированая строка. 
2. Чтобы движок стилизовал не строку целиком, ему нужно каким-то образом указать, какие слова нужно покрасить. Сделать это так, как в гаймовере, я не могу, потому что у каждой игры - разное вступление. Значит, чтобы движок знал, что делать, нужно либо в нем прописать какие слова и как красить, но тогда чтобы что-то поменять, нужно лезть в движок, либо передавать правила стилизации извне. Допустим я прописываю в самом движке, что определенные слова в получаемой строке должны быть декорированы, тогда все, что делает моя функция “getDecoratedString” должен будет сделать сам движок - найти подстроки, и если они есть, декорировать, после чего собрать в строку и показать в консоле. А если я захочу добавить стили, тогда придется опять лезть в движок? Похоже, я что-то упускаю и не могу дойти до этого сам. 

10. src/utils/funcs.js
// директория требуется, если в ней будут храниться несколько файлов. Здесь нам достаточно иметь один модуль со вспомогательными функциями utils в корне src. // 
=== исправлено. 




-----------------------------------------------------------------


14/04/2020
1. Из package.json ибрал неиспользуемые зависимости: hexlet-pair-data и eslint-jest, при попытке убрать что-нибудь из остальных - проект падает. 
2.   return cons(intro, cons(question, answer.toString())); 
// во всех играх возвращается одинаковая строка для передачи в движок. 
// не во всех есть необходимость к привдению правильного ответа к строке
// но это "стандартизирует" интерфейс для обращения к движку, по крайней мере мне так кажется.
3. Форматирование строки интро перенесено в движок. Но при этом, если сейчас необходимо изменить форматирование интро, придется переписывать движок. То, что перенос на другую строку является элементом форматирования - об этом я забыл вообще. 
